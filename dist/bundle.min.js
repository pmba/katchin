(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _this = this;

const getToggleId = title => "toggle-" + title.toLowerCase().replace(/ /g, "-");

const OptionButton = title => {
	return `
    <div class="tw-full-width tw-relative">
        <button href="mailto:phmbalves@gmail.com"
            class="tw-block tw-border-radius-medium tw-full-width tw-interactable tw-interactable--alpha tw-interactable--hover-enabled tw-interactive">
            <div class="tw-align-items-center tw-flex tw-pd-05 tw-relative">
                <div class="tw-flex-grow-1">${title}</div>
            </div>
        </button>
	</div>`;
};

const OptionSwitch = title => {
	const opId = getToggleId(title);
	return `
    <div class="tw-pd-05">
		<div class="tw-align-items-center tw-flex"><label
				class="tw-drop-down-menu-input-item__label tw-flex-grow-1" for="${opId}">Ativar nesse canal</label>
			<div class="tw-toggle"><input type="checkbox"
					id="${opId}" label="Ativado nesse canal" class="tw-toggle__input"
					data-a-target="tw-toggle"><label for="${opId}" class="tw-toggle__button">
					<p class="tw-hide-accessible">${title}</p>
				</label></div>
		</div>
	</div>`;
};

module.exports.switchActivateQuery = "";

module.exports.Divider = () => {
	const divider = document.createElement("div");
	divider.classList = "tw-border-t tw-mg-t-1 tw-mg-x-05 tw-pd-b-1";
	return divider;
};

module.exports.Options = () => {
	const toggleTitle = "Ativado nesse canal";
	_this.switchActivateQuery = `input[id=${getToggleId(toggleTitle)}]`;

	const optionsHTML = `
	<div class="tw-mg-y-05 tw-pd-x-05">
		<p class="tw-c-text-alt-2 tw-font-size-6 tw-strong tw-upcase">Katchin </p>
	</div>
	${OptionSwitch(toggleTitle)}
    ${OptionButton("Reportar Problema")}
    ${OptionButton("Entrar em Contato")}
	`;

	const opDiv = document.createElement("div");
	opDiv.classList = "tw-mg-y-05 tw-pd-x-05";
	opDiv.innerHTML = optionsHTML;
	return opDiv;
};

},{}],2:[function(require,module,exports){
const { isChannelConfigured } = require("./storaging");

module.exports.startRoutine = () => setInterval(() => {
	if (!isChannelConfigured()) return;

	const popUpOpened = document.getElementsByClassName("sub-modal").length > 0,
	      buttons = document.getElementsByClassName("tw-button__text");
	popUpOpened || buttons.length > 0 && buttons[0].click();
}, 3e3);

},{"./storaging":4}],3:[function(require,module,exports){
"use strict";

/** @license
 * Copyright (c) 2020 Phyllipe Bezerra
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of software and associated documentation files (the "Software"), to deal
 * in the Software without limitation of the rights to use, copy, modify, merge,
 * and/or publish copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice, any copyright notices herein, and this permission
 * notice shall be included in all copies or substantial portions of the Software,
 * the Software, or portions of the Software, may not be sold for profit, and the
 * Software may not be distributed nor sub-licensed without explicit permission
 * from the copyright owner.
 * 
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 * Should any questions arise concerning your usage of this Software, or to
 * request permission to distribute this Software, please contact the copyright
 * holder at phmbalves@gmail.com
 * 
 * ---------------------------------
 * 
 *   Unofficial TLDR:
 * 
 *   Free to modify for personal use
 *   Need permission to distribute the code
 *   Can't sell addon or features of the addon
 * 
 */

const { introduction, pass } = require("./utils");
const { Divider, Options } = require("./components");
const {
	addChannelToConfig,
	removeChannelFromConfig,
	isChannelConfigured
} = require("./storaging");
const { startRoutine } = require("./farmer");

let pointsWrapperLoaded = false;

const setupPointsWrapper = () => {
	const active = isChannelConfigured();
	const pointsWrapper = document.querySelector("div[data-test-selector=\"community-points-summary\"]");

	if (!pointsWrapper) return;

	// Remove if already exists one
	const existentIndicator = document.getElementById("katchin-status-dot-indicator");
	if (existentIndicator) pointsWrapper.removeChild(existentIndicator);

	const statusIndicator = document.createElement("div");
	const colorRGB = active ? "0, 255, 127" : "255, 0, 0";
	statusIndicator.id = "katchin-status-dot-indicator";
	statusIndicator.style = `left: 6px;bottom: 4px;height: 10px;width: 10px;background-color: rgba(${colorRGB});border-radius: 6px;position: absolute;box-shadow: 0px 0px 5px 1px rgba(${colorRGB}, 0.5);`;
	pointsWrapper.appendChild(statusIndicator);
};

const configSettings = wrapper => {
	const lastSettingOp = wrapper.children[0].children[0].children[1].children[2].children[0].children[0].children[0];

	lastSettingOp.appendChild(Divider());
	lastSettingOp.appendChild(Options());

	const switchQuery = require("./components").switchActivateQuery;
	const activateSwitch = document.querySelector(switchQuery);

	const isConfigured = isChannelConfigured();
	activateSwitch.checked = isConfigured;

	activateSwitch.addEventListener("change", function () {
		if (this.checked) addChannelToConfig();else removeChannelFromConfig();

		setupPointsWrapper();
	});
};

const setup = () => {
	const popoverAttr = "chat-settings-balloon";
	const pointsAttr = "community-points-summary";

	const targetNode = document.querySelector("div[data-test-selector=\"chat-input-buttons-container\"]");
	const nodeConfig = { attributes: false, childList: true, subtree: true };

	const callback = function (mutationsList) {
		try {
			mutationsList.forEach(mutation => {
				var { type, addedNodes } = mutation;
				if (type === "childList" && addedNodes.length > 0) {

					addedNodes.forEach(node => {
						if (node.getAttribute("data-a-target") === popoverAttr) {
							configSettings(node);
						} else if (!pointsWrapperLoaded && node.children && node.children.length > 0) {
							const pointsMaybe = node.children[0];
							if (pointsMaybe.getAttribute("data-test-selector") == pointsAttr) {
								pointsWrapperLoaded = true;
								setupPointsWrapper();
							}
						}
					});
				}
			});
		} catch (err) {
			pass();
		}
	};

	const observer = new MutationObserver(callback);
	observer.observe(targetNode, nodeConfig);

	setTimeout(() => {
		startRoutine();
		setupPointsWrapper();
		introduction();
	}, 500);
};

setup();

},{"./components":1,"./farmer":2,"./storaging":4,"./utils":5}],4:[function(require,module,exports){
const lsKeys = {
	"channels": "katchin-channels"
};

const getCurrentChannelsArr = () => {
	const currentChannels = localStorage[lsKeys.channels] || "";
	return currentChannels !== "" ? currentChannels.split(",").filter(val => val != "") : [];
};

module.exports.isChannelConfigured = () => {
	const url = window.location.href;
	return getCurrentChannelsArr().includes(url);
};

module.exports.addChannelToConfig = () => {
	const url = window.location.href;

	const currentChannelsArr = getCurrentChannelsArr();
	currentChannelsArr.push(url);

	localStorage[lsKeys.channels] = currentChannelsArr;
};

module.exports.removeChannelFromConfig = () => {
	const url = window.location.href;

	const currentChannelsArr = getCurrentChannelsArr();
	localStorage[lsKeys.channels] = currentChannelsArr.filter(val => val !== url);
};

},{}],5:[function(require,module,exports){
"use strict";

var _this = this;

module.exports.pass = () => {};

module.exports.kLog = (message, color = "#e6e6e6") => {
	return console.log(`%c${message}`, `background: #222222; color: ${color}`);
};

module.exports.introduction = () => {
	_this.kLog("\n");
	_this.kLog("‚õèÔ∏è Minerador est√° ativo...", "#83d130");
	_this.kLog("üíª Desenvolvido por Phyllipe Bezerra", "#ffdd1f");
	_this.kLog("\t  Github: https://github.com/pmba", "#e6e6e6");
	_this.kLog("\t Twitter: https://twitter.com/phipslon", "#1fc0ff");
	_this.kLog("üòé Aproveite!", "#ffdd1f");
	_this.kLog("\n");
};

},{}]},{},[3]);
